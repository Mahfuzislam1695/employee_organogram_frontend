import type { Employee, Position, Department, User, Role, EmployeeNode } from "@/types"

// Mock Positions
export const positions: Position[] = [
  {
    id: 1,
    title: "Chief Executive Officer",
    level: 1,
    isExecutive: true,
    description: "Top executive responsible for managing the entire organization",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 2,
    title: "Chief Technology Officer",
    level: 2,
    parentId: 1,
    isExecutive: true,
    description: "Executive responsible for technology strategy and implementation",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 3,
    title: "Chief Financial Officer",
    level: 2,
    parentId: 1,
    isExecutive: true,
    description: "Executive responsible for financial planning and management",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 4,
    title: "Chief Marketing Officer",
    level: 2,
    parentId: 1,
    isExecutive: true,
    description: "Executive responsible for marketing strategy and implementation",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 5,
    title: "Engineering Manager",
    level: 3,
    parentId: 2,
    isExecutive: false,
    description: "Manager responsible for engineering team and projects",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 6,
    title: "Product Manager",
    level: 3,
    parentId: 2,
    isExecutive: false,
    description: "Manager responsible for product development and strategy",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 7,
    title: "Finance Manager",
    level: 3,
    parentId: 3,
    isExecutive: false,
    description: "Manager responsible for financial operations",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 8,
    title: "Marketing Manager",
    level: 3,
    parentId: 4,
    isExecutive: false,
    description: "Manager responsible for marketing campaigns and strategy",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 9,
    title: "Senior Developer",
    level: 4,
    parentId: 5,
    isExecutive: false,
    description: "Senior software developer responsible for complex technical tasks",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 10,
    title: "Junior Developer",
    level: 5,
    parentId: 9,
    isExecutive: false,
    description: "Junior software developer learning and contributing to projects",
    employees: [],
    children: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
]

// Mock Departments
export const departments: Department[] = [
  {
    id: 1,
    name: "Executive",
    code: "EXEC",
    description: "Executive leadership team",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 2,
    name: "Technology",
    code: "TECH",
    description: "Technology and engineering department",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 3,
    name: "Engineering",
    code: "ENG",
    description: "Software engineering team",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 4,
    name: "Product",
    code: "PROD",
    description: "Product management team",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 5,
    name: "Finance",
    code: "FIN",
    description: "Finance and accounting department",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 6,
    name: "Marketing",
    code: "MKT",
    description: "Marketing and communications department",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 7,
    name: "Human Resources",
    code: "HR",
    description: "Human resources department",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 8,
    name: "Operations",
    code: "OPS",
    description: "Operations department",
    employees: [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
]

// Mock Employees
export const employees: Employee[] = [
  {
    id: 1,
    employeeId: "EMP001",
    firstName: "John",
    lastName: "Smith",
    email: "john.smith@company.com",
    phone: "+1 (555) 123-4567",
    positionId: 1,
    position: positions[0],
    path: "1",
    isActive: true,
    departmentId: 1,
    department: departments[0],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 2,
    employeeId: "EMP002",
    firstName: "Sarah",
    lastName: "Johnson",
    email: "sarah.johnson@company.com",
    phone: "+1 (555) 234-5678",
    positionId: 2,
    position: positions[1],
    managerId: 1,
    path: "1.2",
    isActive: true,
    departmentId: 2,
    department: departments[1],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 3,
    employeeId: "EMP003",
    firstName: "Robert",
    lastName: "Taylor",
    email: "robert.taylor@company.com",
    phone: "+1 (555) 345-6789",
    positionId: 3,
    position: positions[2],
    managerId: 1,
    path: "1.3",
    isActive: true,
    departmentId: 5,
    department: departments[4],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 4,
    employeeId: "EMP004",
    firstName: "Lisa",
    lastName: "Brown",
    email: "lisa.brown@company.com",
    phone: "+1 (555) 456-7890",
    positionId: 4,
    position: positions[3],
    managerId: 1,
    path: "1.4",
    isActive: true,
    departmentId: 6,
    department: departments[5],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 5,
    employeeId: "EMP005",
    firstName: "Michael",
    lastName: "Lee",
    email: "michael.lee@company.com",
    phone: "+1 (555) 567-8901",
    positionId: 5,
    position: positions[4],
    managerId: 2,
    path: "1.2.5",
    isActive: true,
    departmentId: 3,
    department: departments[2],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 6,
    employeeId: "EMP006",
    firstName: "Jessica",
    lastName: "Wang",
    email: "jessica.wang@company.com",
    phone: "+1 (555) 678-9012",
    positionId: 6,
    position: positions[5],
    managerId: 2,
    path: "1.2.6",
    isActive: true,
    departmentId: 4,
    department: departments[3],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 7,
    employeeId: "EMP007",
    firstName: "Amanda",
    lastName: "Lewis",
    email: "amanda.lewis@company.com",
    phone: "+1 (555) 789-0123",
    positionId: 7,
    position: positions[6],
    managerId: 3,
    path: "1.3.7",
    isActive: true,
    departmentId: 5,
    department: departments[4],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 8,
    employeeId: "EMP008",
    firstName: "Kevin",
    lastName: "Wilson",
    email: "kevin.wilson@company.com",
    phone: "+1 (555) 890-1234",
    positionId: 8,
    position: positions[7],
    managerId: 4,
    path: "1.4.8",
    isActive: true,
    departmentId: 6,
    department: departments[5],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 9,
    employeeId: "EMP009",
    firstName: "Emily",
    lastName: "Chen",
    email: "emily.chen@company.com",
    phone: "+1 (555) 901-2345",
    positionId: 9,
    position: positions[8],
    managerId: 5,
    path: "1.2.5.9",
    isActive: true,
    departmentId: 3,
    department: departments[2],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 10,
    employeeId: "EMP010",
    firstName: "David",
    lastName: "Kim",
    email: "david.kim@company.com",
    phone: "+1 (555) 012-3456",
    positionId: 9,
    position: positions[8],
    managerId: 5,
    path: "1.2.5.10",
    isActive: true,
    departmentId: 3,
    department: departments[2],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 11,
    employeeId: "EMP011",
    firstName: "Jennifer",
    lastName: "Garcia",
    email: "jennifer.garcia@company.com",
    phone: "+1 (555) 123-4567",
    positionId: 10,
    position: positions[9],
    managerId: 9,
    path: "1.2.5.9.11",
    isActive: true,
    departmentId: 3,
    department: departments[2],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
  {
    id: 12,
    employeeId: "EMP012",
    firstName: "James",
    lastName: "Martinez",
    email: "james.martinez@company.com",
    phone: "+1 (555) 234-5678",
    positionId: 10,
    position: positions[9],
    managerId: 10,
    path: "1.2.5.10.12",
    isActive: true,
    departmentId: 3,
    department: departments[2],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    deletedAt: "1970-01-01T00:00:00.000Z",
    subordinates: [],
  },
]

// Mock Roles
export const roles: Role[] = [
  {
    id: 1,
    name: "Admin",
    description: "Administrator with full access",
    users: [],
    permissions: {
      employees: ["create", "read", "update", "delete"],
      positions: ["create", "read", "update", "delete"],
      departments: ["create", "read", "update", "delete"],
      users: ["create", "read", "update", "delete"],
      roles: ["create", "read", "update", "delete"],
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 2,
    name: "Manager",
    description: "Department manager with limited access",
    users: [],
    permissions: {
      employees: ["read", "update"],
      positions: ["read"],
      departments: ["read"],
      users: [],
      roles: [],
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 3,
    name: "Employee",
    description: "Regular employee with minimal access",
    users: [],
    permissions: {
      employees: ["read"],
      positions: ["read"],
      departments: ["read"],
      users: [],
      roles: [],
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
]

// Mock Users
export const users: User[] = [
  {
    id: 1,
    username: "admin",
    password: "$2a$10$XQxKGKlLM/ZT4n1X8.TZ8O8WEQim0QLz1OZV9V3Gd.7lEjyJqH2Vy", // hashed "password123"
    email: "admin@company.com",
    employeeId: 1,
    employee: employees[0],
    roles: [roles[0]],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 2,
    username: "manager",
    password: "$2a$10$XQxKGKlLM/ZT4n1X8.TZ8O8WEQim0QLz1OZV9V3Gd.7lEjyJqH2Vy",
    email: "manager@company.com",
    employeeId: 5,
    employee: employees[4],
    roles: [roles[1]],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 3,
    username: "employee",
    password: "$2a$10$XQxKGKlLM/ZT4n1X8.TZ8O8WEQim0QLz1OZV9V3Gd.7lEjyJqH2Vy",
    email: "employee@company.com",
    employeeId: 9,
    employee: employees[8],
    roles: [roles[2]],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
]

// Build the employee hierarchy for the organogram
export function buildEmployeeHierarchy(): EmployeeNode {
  // Create a map of employees by ID for quick lookup
  const employeeMap = new Map<number, Employee>()
  employees.forEach((employee) => {
    employeeMap.set(employee.id, { ...employee, subordinates: [] })
  })

  // Build the hierarchy
  employees.forEach((employee) => {
    if (employee.managerId) {
      const manager = employeeMap.get(employee.managerId)
      if (manager) {
        manager.subordinates.push(employeeMap.get(employee.id)!)
      }
    }
  })

  // Find the root employee (CEO)
  const rootEmployee = employees.find((employee) => !employee.managerId)
  if (!rootEmployee) throw new Error("No root employee found")

  // Convert to EmployeeNode format
  function convertToNode(employee: Employee): EmployeeNode {
    return {
      id: employee.id,
      employeeId: employee.employeeId,
      name: `${employee.firstName} ${employee.lastName}`,
      title: employee.position.title,
      department: employee.department?.name || "Unknown",
      departmentCode: employee.department?.code || "UNK",
      email: employee.email,
      phone: employee.phone,
      isActive: employee.isActive,
      managerId: employee.managerId,
      img: `/placeholder.svg?height=50&width=50&text=${employee.firstName[0]}${employee.lastName[0]}`,
      children: employee.subordinates.map(convertToNode),
    }
  }

  return convertToNode(employeeMap.get(rootEmployee.id)!)
}

// Get department color class based on department code
export function getDepartmentColorClass(departmentCode: string): string {
  const codeMap: Record<string, string> = {
    EXEC: "executive",
    TECH: "technology",
    ENG: "engineering",
    PROD: "product",
    FIN: "finance",
    MKT: "marketing",
    HR: "hr",
    OPS: "operations",
    SALES: "sales",
    LEGAL: "legal",
  }

  return `badge-${codeMap[departmentCode] || "default"}`
}

// Get department color based on department code (for D3 visualization)
export function getDepartmentColor(departmentCode: string): string {
  const codeMap: Record<string, string> = {
    EXEC: "hsl(262, 80%, 50%)", // Purple
    TECH: "hsl(199, 89%, 48%)", // Bright Blue
    ENG: "hsl(188, 95%, 43%)", // Cyan
    PROD: "hsl(162, 94%, 30%)", // Green
    FIN: "hsl(45, 93%, 47%)", // Yellow
    MKT: "hsl(358, 85%, 52%)", // Red
    HR: "hsl(326, 73%, 55%)", // Pink
    OPS: "hsl(27, 96%, 61%)", // Orange
    SALES: "hsl(214, 100%, 68%)", // Light Blue
    LEGAL: "hsl(271, 91%, 65%)", // Violet
  }

  return codeMap[departmentCode] || "hsl(220, 14%, 80%)" // Default gray
}
